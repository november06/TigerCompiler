package tiger.parse;

terminal String ID, STRING;
terminal Integer INT;
terminal COMMA, COLON, SEMICOLON, LPAREN, RPAREN, 
	LBRACK, RBRACK, LBRACE, RBRACE, DOT, PLUS, MINUS, 
	TIMES, DIVIDE, EQ, NEQ, LT, LE, GT, GE, AND, OR, 
	ASSIGN, 
    ARRAY, BREAK, DO, ELSE, END, FOR, FUNCTION, IF, 
	IN, LET, NIL, OF, THEN, TO, TYPE, VAR, WHILE;


non terminal program; // done
non terminal expr;    // done
non terminal lvalue;  // done
non terminal binary_operator; // done
non terminal expr_list;  // done
non terminal expr_seq;   // done
// non terminal type_id;    // done
non terminal field_list; // done
non terminal declaration_list; // done
non terminal declaration;     // done
non terminal type_declaration;// done
non terminal variable_declaration; // done 
non terminal function_declaration; // done
non terminal type;            // done
non terminal type_fields;     // done
non terminal type_field;      // done

precedence nonassoc ASSIGN;
precedence left AND, OR;
precedence nonassoc EQ, NEQ, LT, GT, LE, GE;
precedence left PLUS, MINUS;
precedence left TIMES, DIVIDE;
// precedence left UMINUS; // TODO

start with program;

program ::= expr;
// expr with values and without values
expr ::= STRING |
         INT |
		 NIL |
		 lvalue |
		 MINUS expr | 
		 expr binary_operator expr |
		 lvalue ASSIGN expr | 
		 ID LPAREN expr_list RPAREN | // function call
		 LPAREN expr_seq RPAREN | 
         // type_id LBRACE field_list RBRACE |
		 ID LBRACE field_list RBRACE |
		 // type_id LBRACK expr RBRACK OF expr |
		 ID LBRACK expr RBRACK OF expr |
		 IF expr THEN expr | 
		 IF expr THEN expr ELSE expr | 
		 WHILE expr DO expr | 
		 FOR ID ASSIGN expr TO expr DO expr | 
		 BREAK | // ?
		 LET declaration_list IN expr_seq END
		 ;

expr_seq ::= expr |
             expr_seq SEMICOLON expr;

expr_list ::= expr |
              expr_list COMMA expr;

field_list ::= ID EQ expr |
               field_list COMMA ID EQ expr;

lvalue ::= ID |
           lvalue DOT ID |
		   lvalue LBRACK expr RBRACK;

binary_operator ::= PLUS |
                    MINUS | 
					TIMES |
					DIVIDE | 
					EQ |
					NEQ | 
					LT |
					GT |
					LE |
					GE |
					AND |
					OR ;

declaration_list ::= declaration |
                    declaration_list declaration;

declaration ::= type_declaration | 
                variable_declaration | 
				function_declaration ;

type_declaration ::= TYPE ID EQ type;// TYPE type_id EQ type;

type ::= // type_id |
         ID | 
         LBRACE type_fields RBRACE |
		 ARRAY OF ID;
		 // ARRAY OF type_id;

type_fields ::= type_field |
                type_fields COMMA type_field;

type_field ::= ID COLON ID;// ID COLON type_id;

// type_id ::= ID;

variable_declaration ::= VAR ID ASSIGN expr |
                         VAR ID COLON ID ASSIGN expr;
                         //VAR ID COLON type_id ASSIGN expr;

function_declaration ::= FUNCTION ID LPAREN type_fields RPAREN EQ expr |
                         // FUNCTION ID LPAREN type_fields RPAREN COLON type_id EQ expr;
						 FUNCTION ID LPAREN type_fields RPAREN COLON ID EQ expr;