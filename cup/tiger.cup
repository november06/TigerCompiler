package tiger.parse;
import tiger.absyn.*;
// import tiger.symbol.*;

terminal String ID, STRING;
terminal Integer INT;
terminal COMMA, COLON, SEMICOLON, LPAREN, RPAREN, 
	LBRACK, RBRACK, LBRACE, RBRACE, DOT, PLUS, MINUS, 
	TIMES, DIVIDE, EQ, NEQ, LT, LE, GT, GE, AND, OR, 
	ASSIGN, 
    ARRAY, BREAK, DO, ELSE, END, FOR, FUNCTION, IF, 
	IN, LET, NIL, OF, THEN, TO, TYPE, VAR, WHILE;


non terminal program;
non terminal expr;   
non terminal lvalue; 
non terminal binary_operator;
non terminal expr_list; 
non terminal expr_seq;  
non terminal field_list;
non terminal declaration_list;
non terminal declaration;    
non terminal type_declaration;
non terminal variable_declaration; 
non terminal function_declaration;
non terminal type;           
non terminal type_fields;    
non terminal type_field;     

precedence nonassoc ASSIGN;
precedence left AND, OR;  // right?
precedence nonassoc EQ, NEQ, LT, GT, LE, GE;
precedence left PLUS, MINUS;
precedence left TIMES, DIVIDE;
// precedence left UMINUS; // TODO

start with program;

program ::= expr;
// expr with values and without values
expr ::= STRING:s 
         {:
		     RESULT = new LiteralExp(sleft, s);
		 :} 
         |
         INT:i
		 {:
		     RESULT = new LiteralExp(ileft, i); // TODO: why i was converted to an integer?
		 :} 
		 |
		 NIL:n
		 {:
		     RESULT = new LiteralExp(nleft);
		 :} 
		 |
		 lvalue:l
		 {:
		     RESULT = l; // should already have been a lvalue expression
		 :}
		 |
		 MINUS:uminus expr:e 
		 {:
		     RESULT = new UminusExp(uminusleft, (Exp)e);
		 :}
		 | 
		 expr:e1 binary_operator:op expr:e2 
		 {:
		     RESULT = new BinaryOperationExp(e1left, (Exp)e1, (Integer)op, (Exp)e2);
		 :}
		 |
		 lvalue:lvalueExpr ASSIGN expr:rvalueExpr
		 {:
		     RESULT = new AssignExp(lvalueExprleft, (LvalueExp)lvalueExpr, (Exp)rvalueExpr);
		 :} 
		 | 
		 ID:id LPAREN expr_list:exprlist RPAREN 
		 {:
		     // function call
		     RESULT = new FunctionCallExp(idleft, id, (Exp)exprlist);
		 :}
		 |
		 LPAREN expr_seq:e RPAREN 
		 {:
		     // what's this?
		     RESULT = e;
		 :}
		 | 
		 ID:id LBRACE field_list:fl RBRACE 
		 {
		     // record type definition
             RESULT = new RecordDefinitionExp(idleft, id, fl);
		 }
		 |
		 ID:id LBRACK expr:count RBRACK OF expr:base 
		 {
		     // ARRAY type definition
			 RESULT = new ArrayDefinitionExp(idleft, id, count, base);
		 }
		 |
		 IF:i expr:condition THEN expr:e1 
		 {:
		     RESULT = new IfElseExp(ileft, (Exp)condition, (Exp)e1);
		 :}
		 | 
		 IF:i expr:condition THEN expr:e1 ELSE expr:e2
		 {:
		     RESULT = new IfElseExp(ileft, (Exp)condition, (Exp)e1, (Exp)e2);
		 :}
		 | 
		 WHILE:w expr:condition DO expr:e 
		 {:
		     RESULT = new WhileExp(wleft, (Exp)condition, (Exp)e);
		 :}
		 | 
		 FOR:f ID:id ASSIGN expr:es TO expr:ee DO expr:eaction 
		 {:
			 RESULT = new ForExp(fleft, id, es, ee, eaction);
		 :}
		 | 
		 BREAK:b
		 {:
		     RESULT = new BreakExp(bleft);
		 :}
		 |
		 LET:let declaration_list:dl IN expr_seq:e END
		 {:
             RESULT = new LetExp(letleft, dl, e);
		 :}
		 ;

expr_seq ::= expr:e
             {:
			     RESULT = new SeqExp(eleft, (Exp)e);
			 :} 
             |
             expr_seq:e1 SEMICOLON expr:e2
			 {:
			     RESULT = new SeqExp(e1left, (Exp)e1, (Exp)e2);
			 :}
			 ;

expr_list ::= expr:e
              {:
			      RESULT = new ListExp(eleft, (Exp)e);
			  :} 
              |
              expr_list:head COMMA expr:tail
			  {:
			      RESULT = new ListExp(headleft, (Exp)head, (Exp)tail);
			  :};

field_list ::= ID:id EQ expr:e
               {:
			       RESULT = new FieldListExp(idleft, id, e);
			   :} 
               |
               field_list:f COMMA ID:id EQ expr:e
			   {:
			       RESULT = new FieldListExp(fleft, f, id, e);
			   :};

lvalue ::= ID:id
           {:
		       RESULT = new LvalueExp(idleft, id);
		   :} 
           |
           lvalue:lvalueExp DOT ID:fieldId
		   {:
		       RESULT = new LvalueExp(lvalueExpleft, (LvalueExp)lvalueExp, fieldId);
		   :}
		   |
		   lvalue:lvalueExp LBRACK expr:exp RBRACK
		   {:
		       RESULT = new LvalueExp(lvalueExpleft, (LvalueExp)lvalueExp, (Exp)exp);
		   :}
		   ;

binary_operator ::= PLUS 
                    {:
					    RESULT = BinaryOperationExp.PLUS;
					:}
					|
                    MINUS
					{:
					    RESULT = BinaryOperationExp.MINUS;
					:} 
					| 
					TIMES
					{:
					    RESULT = BinaryOperationExp.TIMES;
					:} 
					|
					DIVIDE 
					{:
					    RESULT = BinaryOperationExp.DIVIDE;
					:}
					| 
					EQ 
					{:
					    RESULT = BinaryOperationExp.EQ;
					:}
					|
					NEQ 
					{:
					    RESULT = BinaryOperationExp.NE;
					:}
					| 
					LT 
					{:
					    RESULT = BinaryOperationExp.LT;
					:}
					|
					GT
					{:
					    RESULT = BinaryOperationExp.GT;
					:} 
					|
					LE 
					{:
					    RESULT = BinaryOperationExp.LE;
					:}
					|
					GE 
					{:
					    RESULT = BinaryOperationExp.GE;
					:}
					|
					AND 
					{:
					    RESULT = BinaryOperationExp.AND;
					:}
					|
					OR
					{:
					    RESULT = BinaryOperationExp.OR;
					:} 
					;

declaration_list ::= declaration:d
                     {:
					     RESULT = new DeclarationListExp(dleft, d);
					 :}
                     |
                     declaration_list:dl COMMA declaration:d
					 {:
					     RESULT = new DeclarationListExp(dlleft, d, dl);
					 :}
					;

declaration ::= type_declaration:d
                {:
				    RESULT = d;
				:} 
                | 
                variable_declaration:d
				{:
				    RESULT = d;
				:} 
				| 
				function_declaration:d
				{:
				    RESULT = d;
				:}
				;

type_declaration ::= TYPE:t ID:id EQ type:td
                     {:
					     RESULT = new TypeDeclarationExp(tleft, id, td);
					 :};

type ::= ID:id
         {:
		     RESULT = new TypeDefinitionExp(idleft, TypeDefinitionExp.ID, id);
		 :} 
         | 
         LBRACE:l type_fields:tfs RBRACE 
		 {:
             RESULT = new TypeDefinitionExp(lleft, TypeDefinitionExp.RECORD, tfs);
		 :}
		 |
		 ARRAY:l OF ID:id
		 {:
             RESULT = new TypeDefinitionExp(lleft, TypeDefinitionExp.ARRAY, id);
		 :};

type_fields ::= type_field:t
                {:
				    RESULT = new TypeFieldsExp(tleft, t);
				:} 
                |
                type_fields:th COMMA type_field:tf
				{:
				    RESULT = new TypeFieldsExp(thleft, th, tf);
				:}
				;

type_field ::= ID:id COLON ID:typeid
               {:
			       RESULT = new TypeFieldExp(idleft, id, typeid);
			   :};

variable_declaration ::= VAR:v ID:id ASSIGN expr:exp
                         {:
						     RESULT = new VariableDeclarationExp(vleft, id, exp);
						 :}
                         |
                         VAR:v ID:id COLON ID:typeid ASSIGN expr:exp
						 {:
						     RESULT = new VariableDeclarationExp(vleft, id, typeid, exp);
						 :};

function_declaration ::= FUNCTION:f ID:fname LPAREN type_fields:tfs RPAREN EQ expr:exp
                         {:
						     RESULT = new FunctionDeclarationExp(fleft, fname, tfs, exp);
						 :}
                         |
						 FUNCTION:f ID:fname LPAREN type_fields:tfs RPAREN COLON ID:returntype EQ expr:exp
						 {:
						     RESULT = new FunctionDeclarationExp(fleft, fname, tfs, returntype, exp);
						 :};